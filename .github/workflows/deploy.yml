name: Deploy to Elastic Beanstalk with ECR

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate env-config.json
        run: |
          echo '[
            {
              "Namespace": "aws:elasticbeanstalk:application:environment",
              "OptionName": "DB_URL",
              "Value": "${{ secrets.DB_URL }}"
            },
            {
              "Namespace": "aws:elasticbeanstalk:application:environment",
              "OptionName": "DB_USERNAME",
              "Value": "${{ secrets.DB_USERNAME }}"
            },
            {
              "Namespace": "aws:elasticbeanstalk:application:environment",
              "OptionName": "DB_PASSWORD",
              "Value": "${{ secrets.DB_PASSWORD }}"
            }
          ]' > env-config.json

      - name: Update Elastic Beanstalk Environment Variables
        run: |
          aws elasticbeanstalk update-environment --application-name iroha \
            --environment-name Iroha-env-1 \
            --option-settings file://env-config.json

      - name: Build frontend
        run: |
          cd frontend
          npm install
          CI=false npm run build
          cd ..

      - name: Upload frontend build to S3
        run: |
          aws s3 sync ./frontend/build s3://elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }}/iroha/frontend/

      - name: Upload nginx.conf to S3
        run: |
          aws s3 cp ./nginx/nginx.conf s3://elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }}/iroha/nginx.conf

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names my-backend || aws ecr create-repository --repository-name my-backend

      - name: Build and push Docker image
        run: |
          docker build -t my-backend ./backend
          docker tag my-backend ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend:latest

      - name: Generate Dockerrun.aws.json
        run: |
          echo '{
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-backend:latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "8080"
              }
            ],
            "Logging": "/var/log/nginx"
          }' > Dockerrun.aws.json

      - name: Upload Dockerrun.aws.json to S3
        run: |
          aws s3 cp Dockerrun.aws.json s3://elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }}/iroha/Dockerrun.aws.json

      - name: Ensure Elastic Beanstalk Application Exists
        run: |
          APP_EXISTS=$(aws elasticbeanstalk describe-applications --query "Applications[*].ApplicationName" --output text | grep -w "iroha" || echo "no")
          if [ "$APP_EXISTS" = "no" ]; then
            aws elasticbeanstalk create-application --application-name iroha
          else
            echo "Elastic Beanstalk application 'iroha' already exists. Skipping creation."
          fi

      - name: Get Current Elastic Beanstalk Environment Name
        id: get_env_name
        run: |
          ENV_NAME=$(aws elasticbeanstalk describe-environments --application-name iroha --query "Environments[0].EnvironmentName" --output text)
          echo "EB_ENV_NAME=$ENV_NAME" >> $GITHUB_ENV

      - name: Create new Elastic Beanstalk application version
        run: |
          aws elasticbeanstalk create-application-version --application-name iroha \
            --version-label "v-${{ github.run_number }}" \
            --source-bundle S3Bucket="elasticbeanstalk-${{ secrets.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }}",S3Key="my-app/Dockerrun.aws.json"

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment --application-name iroha \
            --environment-name ${{ env.EB_ENV_NAME }} \
            --version-label "v-${{ github.run_number }}"
